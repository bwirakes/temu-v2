"use client";

import { useEffect, useState } from "react";
import { toast } from "sonner";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { 
  FileText, 
  Phone, 
  Mail, 
  MapPin, 
  Download, 
  Edit, 
  User, 
  PlusCircle, 
  Calendar,
  Trash2,
  Plus,
  X,
  Briefcase,
  GraduationCap,
  CheckCircle2,
  AlertCircle
} from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Popover, 
  PopoverContent, 
  PopoverTrigger 
} from "@/components/ui/popover";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { cn } from "@/lib/utils";
import { format, parse, isValid } from "date-fns";
import ProfileSkeleton from "./ProfileSkeleton";
import Image from "next/image";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { z } from "zod";
import ProfilePhotoUploader from "./ProfilePhotoUploader";
import { SectionCard, InfoItem, EmptyState, ItemCard, StatusBadge } from "./ProfileComponents";
import { CV } from './CV';

// Type definitions
type Pendidikan = {
  id: string;
  namaInstitusi: string;
  lokasi: string;
  jenjangPendidikan: string;
  bidangStudi: string;
  tanggalLulus: string;
  deskripsiTambahan?: string;
  masihBelajar: boolean;
};

type LokasiKerjaType = "Work From Office (WFO)" | "Work From Home (WFH)" | "Hybrid";

type PengalamanKerja = {
  id: string;
  namaPerusahaan: string;
  posisi: string;
  tanggalMulai: string;
  tanggalSelesai: string;
  lokasi: string;
  lokasiKerja: LokasiKerjaType;
  deskripsiPekerjaan: string;
  alasanKeluar?: string;
  masihBekerja: boolean;
};

// Main profile data type
interface ProfileData {
  id: string;
  namaLengkap: string;
  email: string;
  nomorTelepon: string;
  tanggalLahir: string;
  tempatLahir?: string;
  jenisKelamin?: string;
  cvFileUrl?: string;
  cvUploadDate?: string;
  profilePhotoUrl?: string;
  levelPengalaman?: string;
  ekspektasiKerja?: any;
  alamat?: any;
  pendidikan?: Pendidikan[];
  pengalamanKerja?: PengalamanKerja[];
}

interface ProfileClientProps {
  userId: string;
}

// Constants for form options
const jenjangPendidikanOptions = [
  "SD",
  "SMP",
  "SMA/SMK",
  "D1",
  "D2",
  "D3",
  "D4",
  "S1",
  "S2",
  "S3",
];

const levelPengalamanOptions = [
  "Baru lulus",
  "Pengalaman magang",
  "Kurang dari 1 tahun", 
  "1-2 tahun",
  "3-5 tahun",
  "5-10 tahun",
  "10 tahun lebih",
];

const alasanKeluarOptions = [
  "Kontrak tidak diperpanjang",
  "Gaji terlalu kecil",
  "Tidak cocok dengan atasan / rekan kerja",
  "Lokasi terlalu jauh",
  "Pekerjaan terlalu berat",
  "Lainnya"
];

const lokasiKerjaOptions: LokasiKerjaType[] = [
  "Work From Office (WFO)",
  "Work From Home (WFH)",
  "Hybrid",
];

export default function ProfileClient({ userId }: ProfileClientProps) {
  const [profileData, setProfileData] = useState<ProfileData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState<Partial<ProfileData>>({});
  const [activeTab, setActiveTab] = useState("informasi-dasar");
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // State for education editing
  const [editingPendidikan, setEditingPendidikan] = useState<boolean>(false);
  const [pendidikanList, setPendidikanList] = useState<Pendidikan[]>([]);
  
  // State for work experience editing
  const [editingPengalaman, setEditingPengalaman] = useState<boolean>(false);
  const [pengalamanList, setPengalamanList] = useState<PengalamanKerja[]>([]);
  const [tidakAdaPengalaman, setTidakAdaPengalaman] = useState<boolean>(false);
  
  const router = useRouter();
  const { data: session, status } = useSession();
  
  // Check authentication client-side as well
  useEffect(() => {
    if (status === 'unauthenticated') {
      // Redirect to login if session is lost during client navigation
      router.push('/auth/signin?callbackUrl=/job-seeker/profile');
    }
  }, [status, router]);

  // Fetch the profile data
  useEffect(() => {
    async function fetchProfileData() {
      // Don't fetch if no userId or session is loading
      if (!userId || status === 'loading') {
        return;
      }
      
      try {
        setIsLoading(true);
        setError(null);
        const response = await fetch("/api/job-seeker/profile");
        
        if (response.status === 401 || response.status === 403) {
          // Authentication/authorization issue - redirect to login
          router.push('/auth/signin?callbackUrl=/job-seeker/profile');
          return;
        }
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || errorData.error || "Failed to load profile data");
        }
        
        const result = await response.json();
        
        if (result.success && result.data) {
          setProfileData(result.data);
          
          // Initialize education data
          if (result.data.pendidikan && Array.isArray(result.data.pendidikan)) {
            setPendidikanList(result.data.pendidikan);
          } else {
            setPendidikanList([]);
          }
          
          // Initialize work experience data
          if (result.data.pengalamanKerja && Array.isArray(result.data.pengalamanKerja) && result.data.pengalamanKerja.length > 0) {
            setPengalamanList(result.data.pengalamanKerja);
            setTidakAdaPengalaman(false);
          } else {
            setPengalamanList([]);
            setTidakAdaPengalaman(true);
          }
          
          setEditData({}); // Reset edit data
        } else {
          throw new Error(result.error || "Failed to load profile data");
        }
      } catch (error) {
        console.error("Error loading profile data:", error);
        setError(error instanceof Error ? error.message : "Gagal memuat data profil");
        toast.error("Gagal memuat data profil");
      } finally {
        setIsLoading(false);
      }
    }

    fetchProfileData();
  }, [userId, status, router]);

  // Handle editing mode toggle
  const handleEditToggle = () => {
    if (isEditing) {
      // If we're exiting edit mode without saving, reset the form
      setEditData({});
    } else {
      // If we're entering edit mode, initialize edit data with current values
      setEditData({
        namaLengkap: profileData?.namaLengkap,
        nomorTelepon: profileData?.nomorTelepon,
        tanggalLahir: profileData?.tanggalLahir,
        tempatLahir: profileData?.tempatLahir,
        jenisKelamin: profileData?.jenisKelamin,
        levelPengalaman: profileData?.levelPengalaman,
      });
    }
    
    setIsEditing(!isEditing);
  };

  // Handle input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setEditData(prev => ({ ...prev, [name]: value }));
  };
  
  // Handle select changes
  const handleSelectChange = (name: string, value: string) => {
    setEditData(prev => ({ ...prev, [name]: value }));
  };

  // Save profile changes
  const handleSaveChanges = async () => {
    try {
      setIsSaving(true);
      
      const response = await fetch("/api/job-seeker/profile", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(editData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to save changes");
      }
      
      const result = await response.json();
      
      // Update local state with the saved data
      if (profileData) {
        setProfileData({
          ...profileData,
          ...editData
        });
      }
      
      // Exit edit mode
      setIsEditing(false);
      setEditData({});
      
      toast.success("Profil berhasil diperbarui");
    } catch (error) {
      console.error("Error saving profile changes:", error);
      toast.error(error instanceof Error ? error.message : "Gagal menyimpan perubahan");
    } finally {
      setIsSaving(false);
    }
  };

  // Format dates for display
  const formatDisplayDate = (dateString?: string) => {
    if (!dateString) return "";
    if (dateString === "Sekarang") return "Sekarang";
    
    try {
      const date = new Date(dateString);
      return format(date, "MM/yyyy");
    } catch (e) {
      return dateString;
    }
  };

  // Education (Pendidikan) management
  const handleAddPendidikan = () => {
    const newPendidikan: Pendidikan = {
      id: "temp-" + Date.now(),
      namaInstitusi: "",
      lokasi: "",
      jenjangPendidikan: "",
      bidangStudi: "",
      tanggalLulus: "",
      masihBelajar: false,
    };
    setPendidikanList([...pendidikanList, newPendidikan]);
  };
  
  const handleSavePendidikan = (item: Pendidikan) => {
    const updatedList = pendidikanList.map((p) => 
      p.id === item.id ? item : p
    );
    
    if (!updatedList.find((p) => p.id === item.id)) {
      updatedList.push(item);
    }
    
    setPendidikanList(updatedList);
  };
  
  const handleDeletePendidikan = (id: string) => {
    const updatedList = pendidikanList.filter((p) => p.id !== id);
    setPendidikanList(updatedList);
  };
  
  const handleSavePendidikanChanges = async () => {
    try {
      setIsSaving(true);
      
      const response = await fetch("/api/job-seeker/profile", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ pendidikan: pendidikanList }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to save education data");
      }
      
      const result = await response.json();
      
      // Update local state with the saved data
      if (profileData && result.data) {
        setProfileData({
          ...profileData,
          pendidikan: result.data.pendidikan
        });
      }
      
      // Exit edit mode
      setEditingPendidikan(false);
      
      toast.success("Riwayat pendidikan berhasil diperbarui");
    } catch (error) {
      console.error("Error saving education data:", error);
      toast.error(error instanceof Error ? error.message : "Gagal menyimpan data pendidikan");
    } finally {
      setIsSaving(false);
    }
  };

  // Work Experience (Pengalaman Kerja) management
  const handleAddPengalaman = () => {
    const newPengalaman: PengalamanKerja = {
      id: "temp-" + Date.now(),
      namaPerusahaan: "",
      posisi: "",
      tanggalMulai: "",
      tanggalSelesai: "",
      lokasi: "",
      lokasiKerja: "Work From Office (WFO)",
      deskripsiPekerjaan: "",
      masihBekerja: false,
    };
    setPengalamanList([...pengalamanList, newPengalaman]);
  };
  
  const handleSavePengalaman = (item: PengalamanKerja) => {
    const updatedList = pengalamanList.map((p) => 
      p.id === item.id ? item : p
    );
    
    if (!updatedList.find((p) => p.id === item.id)) {
      updatedList.push(item);
    }
    
    setPengalamanList(updatedList);
  };
  
  const handleDeletePengalaman = (id: string) => {
    const updatedList = pengalamanList.filter((p) => p.id !== id);
    setPengalamanList(updatedList);
    
    // If all items are deleted, add a default one
    if (updatedList.length === 0 && !tidakAdaPengalaman) {
      handleAddPengalaman();
    }
  };
  
  const handleTidakAdaPengalamanChange = (checked: boolean | "indeterminate") => {
    setTidakAdaPengalaman(checked === true);
    
    if (checked === true) {
      // If checked, clear the work experience list
      setPengalamanList([]);
    } else if (pengalamanList.length === 0) {
      // If unchecked and list is empty, add a default entry
      const defaultPengalaman: PengalamanKerja = {
        id: "temp-" + Date.now(),
        namaPerusahaan: "",
        posisi: "",
        tanggalMulai: "",
        tanggalSelesai: "",
        lokasi: "",
        lokasiKerja: "Work From Office (WFO)",
        deskripsiPekerjaan: "",
        masihBekerja: false,
      };
      setPengalamanList([defaultPengalaman]);
    }
  };
  
  const handleSavePengalamanChanges = async () => {
    try {
      setIsSaving(true);
      
      // If "no experience" is checked, submit an empty array
      // Otherwise, submit the current list
      const finalPengalamanList = tidakAdaPengalaman ? [] : pengalamanList;
      
      // Validate required fields before submission
      const hasInvalidEntries = finalPengalamanList.some(p => 
        !p.namaPerusahaan || 
        !p.posisi || 
        !p.tanggalMulai ||
        (!p.tanggalSelesai && p.tanggalSelesai !== "Sekarang")
      );
      
      if (hasInvalidEntries) {
        toast.error("Mohon lengkapi semua data pengalaman kerja");
        setIsSaving(false);
        return;
      }
      
      const response = await fetch("/api/job-seeker/profile", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ pengalamanKerja: finalPengalamanList }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to save work experience data");
      }
      
      const result = await response.json();
      
      // Update local state with the saved data
      if (profileData && result.data) {
        setProfileData({
          ...profileData,
          pengalamanKerja: result.data.pengalamanKerja
        });
      }
      
      // Exit edit mode
      setEditingPengalaman(false);
      
      toast.success("Pengalaman kerja berhasil diperbarui");
    } catch (error) {
      console.error("Error saving work experience data:", error);
      toast.error(error instanceof Error ? error.message : "Gagal menyimpan data pengalaman kerja");
    } finally {
      setIsSaving(false);
    }
  };

  // Handle profile photo update
  const handleProfilePhotoUpdated = (url: string) => {
    // Update the profileData state with the new URL
    if (profileData) {
      setProfileData({
        ...profileData,
        profilePhotoUrl: url
      });
    }
  };

  // Show loading state
  if (isLoading) {
    return <ProfileSkeleton />;
  }
  
  // Show error state if there was an error fetching data
  if (error) {
    return (
      <div className="text-center py-10">
        <h2 className="text-xl font-semibold mb-2">Error</h2>
        <p className="text-gray-500 mb-4">{error}</p>
        <Button onClick={() => window.location.reload()}>
          Coba Lagi
        </Button>
      </div>
    );
  }

  // Show error state if profile not found
  if (!profileData) {
    return (
      <div className="text-center py-10">
        <h2 className="text-xl font-semibold mb-2">Profil tidak ditemukan</h2>
        <p className="text-gray-500 mb-4">
          Kami tidak dapat menemukan data profil Anda. Silakan lengkapi proses onboarding.
        </p>
        <Button asChild>
          <a href="/job-seeker/onboarding">Mulai Onboarding</a>
        </Button>
      </div>
    );
  }

  const initials = profileData.namaLengkap
    .split(" ")
    .map(name => name[0])
    .join("")
    .toUpperCase()
    .substring(0, 2);

  return (
    <div className="w-full space-y-6">
      <div className="flex flex-col md:flex-row gap-6">
        {/* Profile sidebar */}
        <div className="w-full md:w-1/3">
          <SectionCard
            title="Informasi Profil"
            icon={<User className="h-4 w-4 text-blue-700" />}
            action={
              !isEditing ? (
                <Button variant="ghost" size="sm" onClick={handleEditToggle} className="transition-colors duration-200 h-7 text-xs">
                  <Edit className="h-3 w-3 mr-1" />
                  Edit
                </Button>
              ) : null
            }
          >
            <div className="flex flex-col items-center text-center">
              <div className="relative">
                <ProfilePhotoUploader 
                  currentPhotoUrl={profileData.profilePhotoUrl} 
                  userName={profileData.namaLengkap}
                  onPhotoUploaded={handleProfilePhotoUpdated}
                />
              </div>
              
              <h2 className="text-lg font-semibold mt-3">
                {isEditing ? (
                  <Input 
                    name="namaLengkap" 
                    value={editData.namaLengkap || ""} 
                    onChange={handleInputChange}
                    className="text-center transition-colors duration-200 focus:border-blue-400 h-8 text-sm"
                  />
                ) : (
                  profileData.namaLengkap
                )}
              </h2>
              
              {!isEditing && (
                <StatusBadge variant="info">
                  {profileData.levelPengalaman || "Belum Ada Level Pengalaman"}
                </StatusBadge>
              )}
              
              {isEditing && (
                <div className="mt-3 w-full space-y-1">
                  <Label className="text-sm font-medium text-gray-500">Level Pengalaman</Label>
                  <Select 
                    value={editData.levelPengalaman || ""} 
                    onValueChange={(value) => handleSelectChange("levelPengalaman", value)}
                  >
                    <SelectTrigger className="transition-colors duration-200 focus:border-blue-400 h-8 text-sm">
                      <SelectValue placeholder="Pilih level pengalaman" />
                    </SelectTrigger>
                    <SelectContent>
                      {levelPengalamanOptions.map((option) => (
                        <SelectItem key={option} value={option} className="text-sm">
                          {option}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
              
              {isEditing ? (
                <div className="flex gap-2 mt-3 w-full">
                  <Button variant="outline" onClick={handleEditToggle} className="flex-1 transition-colors duration-200 h-8 text-xs">
                    Batal
                  </Button>
                  <Button onClick={handleSaveChanges} className="flex-1 transition-colors duration-200 h-8 text-xs" disabled={isSaving}>
                    {isSaving ? "Menyimpan..." : "Simpan"}
                  </Button>
                </div>
              ) : (
                <div className="flex flex-col space-y-3 mt-5 w-full">
                  <InfoItem 
                    label="Email" 
                    value={
                      <div className="flex items-center">
                        <Mail className="h-4 w-4 mr-2 text-gray-500" />
                        <span>{profileData.email}</span>
                      </div>
                    }
                  />
                  <InfoItem 
                    label="Nomor Telepon" 
                    value={
                      <div className="flex items-center">
                        <Phone className="h-4 w-4 mr-2 text-gray-500" />
                        <span>{profileData.nomorTelepon}</span>
                      </div>
                    }
                  />
                  {profileData.alamat?.kota && (
                    <InfoItem 
                      label="Lokasi" 
                      value={
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-2 text-gray-500" />
                          <span>{profileData.alamat.kota}, {profileData.alamat.provinsi}</span>
                        </div>
                      }
                    />
                  )}
                </div>
              )}
            </div>
          </SectionCard>
        </div>
        
        {/* Main content */}
        <div className="w-full md:w-2/3">
          <SectionCard
            title="Informasi Detail"
            icon={<FileText className="h-4 w-4 text-blue-700" />}
          >
            <Tabs defaultValue="informasi-dasar" value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="w-full grid grid-cols-3 mb-3">
                <TabsTrigger value="informasi-dasar" className="transition-all duration-200 text-sm py-1">Informasi Dasar</TabsTrigger>
                <TabsTrigger value="pendidikan" className="transition-all duration-200 text-sm py-1">Pendidikan</TabsTrigger>
                <TabsTrigger value="pengalaman" className="transition-all duration-200 text-sm py-1">Pengalaman</TabsTrigger>
              </TabsList>
              
              <TabsContent value="informasi-dasar">
                <div className="space-y-4">
                  {/* Contact Information */}
                    <div className="space-y-3">
                      <div className="flex justify-between items-center border-b pb-2">
                        <h3 className="text-sm font-medium">Kontak</h3>
                        {!isEditing ? (
                        <Button variant="ghost" size="sm" onClick={handleEditToggle} className="transition-colors duration-200 h-7 text-xs">
                          <Edit className="h-3 w-3 mr-1" />
                          Edit
                        </Button>
                      ) : (
                        <Button variant="ghost" size="sm" onClick={handleEditToggle} className="transition-colors duration-200 h-7 text-xs">
                          <X className="h-3 w-3 mr-1" />
                          Batal
                        </Button>
                        )}
                      </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div className="space-y-1">
                          <Label className="text-xs">Email</Label>
                          <Input 
                          value={profileData.email}
                            disabled 
                            className="bg-gray-50 h-8 text-xs"
                        />
                      </div>
                      <div className="space-y-1">
                          <Label className="text-xs">Nomor Telepon</Label>
                            <Input 
                            value={profileData.nomorTelepon || ""} 
                            disabled={!isEditing} 
                              name="nomorTelepon"
                              onChange={handleInputChange}
                            className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                            />
                          </div>
                      </div>
                    </div>

                  {/* Location Information */}
                    <div className="space-y-3">
                      <h3 className="text-sm font-medium border-b pb-2">Lokasi</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      <div className="space-y-1">
                          <Label className="text-xs">Provinsi</Label>
                            <Input 
                              value={editData.alamat?.provinsi || profileData.alamat?.provinsi || ""} 
                            disabled={!isEditing}
                              name="provinsi"
                              onChange={handleInputChange}
                            className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                            />
                          </div>
                      <div className="space-y-1">
                          <Label className="text-xs">Kota</Label>
                            <Input 
                              value={editData.alamat?.kota || profileData.alamat?.kota || ""} 
                            disabled={!isEditing}
                              name="kota"
                              onChange={handleInputChange}
                            className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                            />
                          </div>
                      </div>
                    </div>

                  {/* Save changes button */}
                  {isEditing && (
                    <div className="flex justify-end mt-3">
                        <Button onClick={handleSaveChanges} disabled={isSaving} className="transition-colors duration-200 h-8 text-xs">
                        {isSaving ? "Menyimpan..." : "Simpan Perubahan"}
                      </Button>
                    </div>
                  )}
                </div>
              </TabsContent>
              
              <TabsContent value="pendidikan">
                <div className="space-y-4">
                    <div className="flex justify-between items-center border-b pb-2">
                      <h3 className="text-sm font-medium">Riwayat Pendidikan</h3>
                      {!editingPendidikan ? (
                        <Button variant="ghost" size="sm" onClick={() => setEditingPendidikan(true)} className="transition-colors duration-200 h-7 text-xs">
                          <Edit className="h-3 w-3 mr-1" />
                          Edit
                        </Button>
                      ) : (
                        <Button variant="ghost" size="sm" onClick={() => setEditingPendidikan(false)} className="transition-colors duration-200 h-7 text-xs">
                          <X className="h-3 w-3 mr-1" />
                          Batal
                        </Button>
                      )}
                    </div>

                    {editingPendidikan ? (
                      <div className="space-y-3">
                        {pendidikanList.length === 0 ? (
                          <div className="text-center py-6 bg-gray-50 rounded-md border border-dashed">
                            <p className="text-xs text-muted-foreground">Belum ada data pendidikan</p>
                              <Button 
                                variant="outline" 
                                onClick={handleAddPendidikan} 
                              className="mt-2 transition-colors duration-200 h-7 text-xs"
                              >
                              <Plus className="h-3 w-3 mr-1" />
                                Tambah Pendidikan
                              </Button>
                          </div>
                        ) : (
                          <>
                              {pendidikanList.map((pendidikan, index) => (
                              <Card key={pendidikan.id} className="overflow-hidden transition-shadow duration-200 hover:shadow-md">
                                <CardHeader className="bg-gray-50 pb-2 pt-3">
                                  <div className="flex justify-between items-center">
                                    <CardTitle className="text-sm">Pendidikan {index + 1}</CardTitle>
                                    <Button 
                                      variant="ghost" 
                                      size="sm" 
                                      onClick={() => handleDeletePendidikan(pendidikan.id)}
                                      className="text-red-500 hover:text-red-700 transition-colors duration-200 h-7 text-xs"
                                    >
                                      <Trash2 className="h-3 w-3" />
                                    </Button>
                                  </div>
                                </CardHeader>
                                <CardContent className="pt-3 space-y-3">
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                      <div className="space-y-1">
                                      <Label className="text-xs">Nama Institusi <span className="text-red-500">*</span></Label>
                                        <Input 
                                          value={pendidikan.namaInstitusi} 
                                          placeholder="Universitas / Sekolah"
                                          onChange={(e) => {
                                            const updated = [...pendidikanList];
                                            updated[index] = {
                                              ...updated[index],
                                              namaInstitusi: e.target.value,
                                            };
                                            setPendidikanList(updated);
                                          }}
                                        className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                        />
                                      </div>
                                      <div className="space-y-1">
                                      <Label className="text-xs">Lokasi</Label>
                                        <Input 
                                          value={pendidikan.lokasi} 
                                          placeholder="Jakarta, Indonesia"
                                          onChange={(e) => {
                                            const updated = [...pendidikanList];
                                            updated[index] = {
                                              ...updated[index],
                                              lokasi: e.target.value,
                                            };
                                            setPendidikanList(updated);
                                          }}
                                        className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                        />
                                      </div>
                                    </div>
                                    
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                      <div className="space-y-1">
                                      <Label className="text-xs">Jenjang Pendidikan <span className="text-red-500">*</span></Label>
                                        <Select 
                                          value={pendidikan.jenjangPendidikan} 
                                          onValueChange={(value) => {
                                            const updated = [...pendidikanList];
                                            updated[index] = {
                                              ...updated[index],
                                              jenjangPendidikan: value,
                                            };
                                            setPendidikanList(updated);
                                          }}
                                        >
                                          <SelectTrigger className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs">
                                            <SelectValue placeholder="Pilih jenjang pendidikan" />
                                          </SelectTrigger>
                                          <SelectContent>
                                            {jenjangPendidikanOptions.map((option) => (
                                              <SelectItem key={option} value={option} className="text-xs">
                                                {option}
                                              </SelectItem>
                                            ))}
                                          </SelectContent>
                                        </Select>
                                      </div>
                                      <div className="space-y-1">
                                      <Label className="text-xs">Bidang Studi <span className="text-red-500">*</span></Label>
                                        <Input 
                                          value={pendidikan.bidangStudi} 
                                          placeholder="Ilmu Komputer, Teknik, dsb."
                                          onChange={(e) => {
                                            const updated = [...pendidikanList];
                                            updated[index] = {
                                              ...updated[index],
                                              bidangStudi: e.target.value,
                                            };
                                            setPendidikanList(updated);
                                          }}
                                          className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                        />
                                      </div>
                                    </div>
                                    
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                      <div className="space-y-1">
                                      <Label className="text-xs">Tahun Lulus <span className="text-red-500">*</span></Label>
                                        <div className="flex items-center gap-2">
                                          <Input 
                                            type="month"
                                            value={pendidikan.tanggalLulus !== "Sekarang" ? pendidikan.tanggalLulus : ""}
                                            onChange={(e) => {
                                              const updated = [...pendidikanList];
                                              updated[index] = {
                                                ...updated[index],
                                                tanggalLulus: e.target.value,
                                                masihBelajar: false,
                                              };
                                              setPendidikanList(updated);
                                            }}
                                            disabled={pendidikan.masihBelajar}
                                            className="flex-1 transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                          />
                                        </div>
                                        <div className="flex items-center gap-2 pt-1">
                                          <Checkbox 
                                            id={`masih-belajar-${index}`}
                                            checked={pendidikan.masihBelajar}
                                            onCheckedChange={(checked) => {
                                              const updated = [...pendidikanList];
                                              updated[index] = {
                                                ...updated[index],
                                                masihBelajar: checked === true,
                                                tanggalLulus: checked === true ? "Sekarang" : "",
                                              };
                                              setPendidikanList(updated);
                                            }}
                                            className="h-3 w-3"
                                          />
                                          <Label htmlFor={`masih-belajar-${index}`} className="text-[10px] font-normal cursor-pointer">
                                            Masih belajar
                                          </Label>
                                        </div>
                                      </div>
                                      <div className="space-y-1">
                                      <Label className="text-xs">Deskripsi (Opsional)</Label>
                                        <Textarea 
                                          value={pendidikan.deskripsiTambahan || ""}
                                          placeholder="Prestasi, aktivitas, atau informasi tambahan"
                                          onChange={(e) => {
                                            const updated = [...pendidikanList];
                                            updated[index] = {
                                              ...updated[index],
                                              deskripsiTambahan: e.target.value,
                                            };
                                            setPendidikanList(updated);
                                          }}
                                          className="h-16 resize-none transition-colors duration-200 focus:border-blue-400 text-xs"
                                        />
                                      </div>
                                    </div>
                                </CardContent>
                              </Card>
                              ))}
                            
                            <div className="flex gap-3 justify-between">
                              <Button 
                                variant="outline" 
                                onClick={handleAddPendidikan}
                                className="transition-colors duration-200 h-7 text-xs"
                              >
                                <Plus className="h-3 w-3 mr-1" />
                                Tambah Pendidikan
                              </Button>
                              <Button 
                                onClick={handleSavePendidikanChanges}
                                disabled={pendidikanList.some(p => !p.namaInstitusi || !p.jenjangPendidikan || !p.bidangStudi || (!p.tanggalLulus && !p.masihBelajar)) || isSaving}
                                className="transition-colors duration-200 h-7 text-xs"
                              >
                                {isSaving ? "Menyimpan..." : "Simpan Perubahan"}
                              </Button>
                            </div>
                          </>
                        )}
                      </div>
                    ) : (
                      <div>
                        {pendidikanList.length === 0 ? (
                          <div className="text-center py-6 bg-gray-50 rounded-md border border-dashed">
                            <p className="text-xs text-muted-foreground">Belum ada data pendidikan</p>
                          </div>
                        ) : (
                          <div className="space-y-3">
                            {pendidikanList.map((pendidikan, index) => (
                              <Card key={pendidikan.id || index} className="transition-shadow duration-200 hover:shadow-sm">
                                <CardHeader className="pb-2 pt-3">
                                  <div className="flex justify-between">
                                    <div>
                                      <CardTitle className="text-sm font-medium">{pendidikan.namaInstitusi}</CardTitle>
                                      <CardDescription className="text-xs">
                                        {pendidikan.jenjangPendidikan} - {pendidikan.bidangStudi}
                                      </CardDescription>
                                    </div>
                                    <div className="text-right">
                                      <p className="text-xs font-medium">
                                        {pendidikan.tanggalLulus === "Sekarang" ? "Sekarang" : formatDisplayDate(pendidikan.tanggalLulus)}
                                      </p>
                                      <p className="text-[10px] text-muted-foreground">{pendidikan.lokasi}</p>
                                    </div>
                                  </div>
                                </CardHeader>
                                {pendidikan.deskripsiTambahan && (
                                  <CardContent className="pt-0">
                                    <p className="text-xs">{pendidikan.deskripsiTambahan}</p>
                                  </CardContent>
                                )}
                              </Card>
                              ))}
                            </div>
                          )}
                        </div>
                      )}
                  </div>
                </TabsContent>
                
                <TabsContent value="pengalaman">
                  <div className="space-y-4">
                    <div className="flex justify-between items-center border-b pb-2">
                      <h3 className="text-sm font-medium">Riwayat Pengalaman</h3>
                      {!editingPengalaman ? (
                        <Button variant="ghost" size="sm" onClick={() => setEditingPengalaman(true)} className="transition-colors duration-200 h-7 text-xs">
                          <Edit className="h-3 w-3 mr-1" />
                          Edit
                        </Button>
                      ) : (
                        <Button variant="ghost" size="sm" onClick={() => setEditingPengalaman(false)} className="transition-colors duration-200 h-7 text-xs">
                          <X className="h-3 w-3 mr-1" />
                          Batal
                        </Button>
                      )}
                    </div>

                    {editingPengalaman ? (
                      <div className="space-y-3">
                        <div className="flex items-center space-x-2">
                          <Checkbox 
                            id="tidakAdaPengalaman"
                            checked={tidakAdaPengalaman}
                            onCheckedChange={handleTidakAdaPengalamanChange}
                            className="h-3 w-3"
                          />
                          <Label htmlFor="tidakAdaPengalaman" className="text-[10px] font-normal cursor-pointer">
                            Saya belum memiliki pengalaman kerja
                          </Label>
                        </div>

                        {!tidakAdaPengalaman && (
                          <>
                            {pengalamanList.map((pengalaman, index) => (
                              <Card key={pengalaman.id} className="overflow-hidden transition-shadow duration-200 hover:shadow-md">
                                <CardHeader className="bg-gray-50 pb-2 pt-3">
                                  <div className="flex justify-between items-center">
                                    <CardTitle className="text-sm">Pengalaman {index + 1}</CardTitle>
                                    <Button 
                                      variant="ghost" 
                                      size="sm" 
                                      onClick={() => handleDeletePengalaman(pengalaman.id)}
                                      className="text-red-500 hover:text-red-700 transition-colors duration-200 h-7 text-xs"
                                    >
                                      <Trash2 className="h-3 w-3" />
                                    </Button>
                                  </div>
                                </CardHeader>
                                <CardContent className="pt-3 space-y-3">
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                    <div className="space-y-1">
                                      <Label className="text-xs">Nama Perusahaan <span className="text-red-500">*</span></Label>
                                      <Input 
                                        value={pengalaman.namaPerusahaan} 
                                        placeholder="Nama perusahaan"
                                        onChange={(e) => {
                                          const updated = [...pengalamanList];
                                          updated[index] = {
                                            ...updated[index],
                                            namaPerusahaan: e.target.value,
                                          };
                                          setPengalamanList(updated);
                                        }}
                                        className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                      />
                                    </div>
                                    <div className="space-y-1">
                                      <Label className="text-xs">Posisi <span className="text-red-500">*</span></Label>
                                      <Input 
                                        value={pengalaman.posisi} 
                                        placeholder="Posisi / jabatan"
                                        onChange={(e) => {
                                          const updated = [...pengalamanList];
                                          updated[index] = {
                                            ...updated[index],
                                            posisi: e.target.value,
                                          };
                                          setPengalamanList(updated);
                                        }}
                                        className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                      />
                                    </div>
                                  </div>
                                  
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                    <div className="space-y-1">
                                      <Label className="text-xs">Tanggal Mulai <span className="text-red-500">*</span></Label>
                                      <Input 
                                        type="month"
                                        value={pengalaman.tanggalMulai}
                                        onChange={(e) => {
                                          const updated = [...pengalamanList];
                                          updated[index] = {
                                            ...updated[index],
                                            tanggalMulai: e.target.value,
                                          };
                                          setPengalamanList(updated);
                                        }}
                                        className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                      />
                                    </div>
                                    <div className="space-y-1">
                                      <Label className="text-xs">Tanggal Selesai <span className="text-red-500">*</span></Label>
                                      <div className="flex flex-col gap-1">
                                        <Input 
                                          type="month"
                                          value={pengalaman.tanggalSelesai !== "Sekarang" ? pengalaman.tanggalSelesai : ""}
                                          onChange={(e) => {
                                            const updated = [...pengalamanList];
                                            updated[index] = {
                                              ...updated[index],
                                              tanggalSelesai: e.target.value,
                                              masihBekerja: false,
                                            };
                                            setPengalamanList(updated);
                                          }}
                                          disabled={pengalaman.masihBekerja}
                                          className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                        />
                                        <div className="flex items-center gap-2">
                                          <Checkbox 
                                            id={`masih-bekerja-${index}`}
                                            checked={pengalaman.masihBekerja}
                                            onCheckedChange={(checked) => {
                                              const updated = [...pengalamanList];
                                              updated[index] = {
                                                ...updated[index],
                                                masihBekerja: checked === true,
                                                tanggalSelesai: checked === true ? "Sekarang" : "",
                                              };
                                              setPengalamanList(updated);
                                            }}
                                            className="h-3 w-3"
                                          />
                                          <Label htmlFor={`masih-bekerja-${index}`} className="text-[10px] font-normal cursor-pointer">
                                            Saya masih bekerja di sini
                                          </Label>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  
                                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                    <div className="space-y-1">
                                      <Label className="text-xs">Lokasi Kerja <span className="text-red-500">*</span></Label>
                                      <Select 
                                        value={pengalaman.lokasiKerja} 
                                        onValueChange={(value) => {
                                          const updated = [...pengalamanList];
                                          updated[index] = {
                                            ...updated[index],
                                            lokasiKerja: value as LokasiKerjaType,
                                          };
                                          setPengalamanList(updated);
                                        }}
                                      >
                                        <SelectTrigger className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs">
                                          <SelectValue placeholder="Pilih lokasi kerja" />
                                        </SelectTrigger>
                                        <SelectContent>
                                          {lokasiKerjaOptions.map((option) => (
                                            <SelectItem key={option} value={option} className="text-xs">
                                              {option}
                                            </SelectItem>
                                          ))}
                                        </SelectContent>
                                      </Select>
                                    </div>
                                    <div className="space-y-1">
                                      <Label className="text-xs">Lokasi <span className="text-red-500">*</span></Label>
                                      <Input 
                                        value={pengalaman.lokasi} 
                                        placeholder="Jakarta, Indonesia"
                                        onChange={(e) => {
                                          const updated = [...pengalamanList];
                                          updated[index] = {
                                            ...updated[index],
                                            lokasi: e.target.value,
                                          };
                                          setPengalamanList(updated);
                                        }}
                                        className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs"
                                      />
                                    </div>
                                  </div>
                                  
                                  <div className="space-y-1">
                                    <Label className="text-xs">Deskripsi Pekerjaan <span className="text-red-500">*</span></Label>
                                    <Textarea 
                                      value={pengalaman.deskripsiPekerjaan} 
                                      placeholder="Ceritakan tentang tanggung jawab dan pencapaian Anda di posisi ini"
                                      onChange={(e) => {
                                        const updated = [...pengalamanList];
                                        updated[index] = {
                                          ...updated[index],
                                          deskripsiPekerjaan: e.target.value,
                                        };
                                        setPengalamanList(updated);
                                      }}
                                      className="h-16 resize-none transition-colors duration-200 focus:border-blue-400 text-xs"
                                    />
                                  </div>
                                  
                                  {!pengalaman.masihBekerja && (
                                    <div className="space-y-1">
                                      <Label className="text-xs">Alasan Keluar</Label>
                                      <Select 
                                        value={pengalaman.alasanKeluar || ""} 
                                        onValueChange={(value) => {
                                          const updated = [...pengalamanList];
                                          updated[index] = {
                                            ...updated[index],
                                            alasanKeluar: value,
                                          };
                                          setPengalamanList(updated);
                                        }}
                                      >
                                        <SelectTrigger className="transition-colors duration-200 focus:border-blue-400 h-8 text-xs">
                                          <SelectValue placeholder="Pilih alasan keluar" />
                                        </SelectTrigger>
                                        <SelectContent>
                                          {alasanKeluarOptions.map((option) => (
                                            <SelectItem key={option} value={option} className="text-xs">
                                              {option}
                                            </SelectItem>
                                          ))}
                                        </SelectContent>
                                      </Select>
                                    </div>
                                  )}
                                </CardContent>
                              </Card>
                            ))}

                            <div className="flex gap-3 justify-between">
                              <Button 
                                variant="outline" 
                                onClick={handleAddPengalaman}
                                className="transition-colors duration-200 h-7 text-xs"
                              >
                                <Plus className="h-3 w-3 mr-1" />
                                Tambah Pengalaman
                              </Button>
                              <Button 
                                onClick={handleSavePengalamanChanges}
                                disabled={pengalamanList.some(p => !p.namaPerusahaan || !p.posisi || !p.tanggalMulai || (!p.tanggalSelesai && !p.masihBekerja) || !p.lokasi || !p.lokasiKerja || !p.deskripsiPekerjaan) || isSaving}
                                className="transition-colors duration-200 h-7 text-xs"
                              >
                                {isSaving ? "Menyimpan..." : "Simpan Perubahan"}
                              </Button>
                            </div>
                          </>
                        )}
                      </div>
                    ) : (
                      <div>
                        {tidakAdaPengalaman ? (
                          <div className="text-center py-6 bg-gray-50 rounded-md border border-dashed">
                            <p className="text-xs text-muted-foreground">Belum memiliki pengalaman kerja</p>
                          </div>
                        ) : pengalamanList.length === 0 ? (
                          <div className="text-center py-6 bg-gray-50 rounded-md border border-dashed">
                            <p className="text-xs text-muted-foreground">Belum ada data pengalaman kerja</p>
                          </div>
                        ) : (
                          <div className="space-y-3">
                            {pengalamanList.map((pengalaman, index) => (
                              <Card key={pengalaman.id || index} className="transition-shadow duration-200 hover:shadow-sm">
                                <CardHeader className="pb-2 pt-3">
                                  <div className="flex justify-between">
                                    <div>
                                      <CardTitle className="text-sm font-medium">{pengalaman.posisi}</CardTitle>
                                      <CardDescription className="text-xs">
                                        {pengalaman.namaPerusahaan} • {pengalaman.lokasiKerja}
                                      </CardDescription>
                                    </div>
                                    <div className="text-right">
                                      <p className="text-xs font-medium">
                                        {formatDisplayDate(pengalaman.tanggalMulai)} - {pengalaman.tanggalSelesai === "Sekarang" ? "Sekarang" : formatDisplayDate(pengalaman.tanggalSelesai)}
                                      </p>
                                      <p className="text-[10px] text-muted-foreground">{pengalaman.lokasi}</p>
                                    </div>
                                  </div>
                                </CardHeader>
                                <CardContent className="pt-0 space-y-2">
                                  <p className="text-xs">{pengalaman.deskripsiPekerjaan}</p>
                                  {pengalaman.alasanKeluar && pengalaman.tanggalSelesai !== "Sekarang" && (
                                    <p className="text-xs text-muted-foreground">
                                      <span className="font-medium">Alasan keluar:</span> {pengalaman.alasanKeluar}
                                    </p>
                                  )}
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </TabsContent>
              </Tabs>
            </SectionCard>
          </div>
        </div>
      
        {/* CV section */}
        <CV cvFileUrl={profileData?.cvFileUrl} cvUploadDate={profileData?.cvUploadDate} />
      </div>
    </div>
  );
}
